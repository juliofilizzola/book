// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPublications(t *testing.T) {
	t.Parallel()

	query := Publications()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPublicationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Publication{}
	if err = randomize.Struct(seed, o, publicationDBTypes, true, publicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publication struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Publications().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPublicationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Publication{}
	if err = randomize.Struct(seed, o, publicationDBTypes, true, publicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publication struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Publications().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Publications().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPublicationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Publication{}
	if err = randomize.Struct(seed, o, publicationDBTypes, true, publicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publication struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PublicationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Publications().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPublicationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Publication{}
	if err = randomize.Struct(seed, o, publicationDBTypes, true, publicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publication struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PublicationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Publication exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PublicationExists to return true, but got false.")
	}
}

func testPublicationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Publication{}
	if err = randomize.Struct(seed, o, publicationDBTypes, true, publicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publication struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	publicationFound, err := FindPublication(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if publicationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPublicationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Publication{}
	if err = randomize.Struct(seed, o, publicationDBTypes, true, publicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publication struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Publications().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPublicationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Publication{}
	if err = randomize.Struct(seed, o, publicationDBTypes, true, publicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publication struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Publications().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPublicationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	publicationOne := &Publication{}
	publicationTwo := &Publication{}
	if err = randomize.Struct(seed, publicationOne, publicationDBTypes, false, publicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publication struct: %s", err)
	}
	if err = randomize.Struct(seed, publicationTwo, publicationDBTypes, false, publicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publication struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = publicationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = publicationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Publications().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPublicationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	publicationOne := &Publication{}
	publicationTwo := &Publication{}
	if err = randomize.Struct(seed, publicationOne, publicationDBTypes, false, publicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publication struct: %s", err)
	}
	if err = randomize.Struct(seed, publicationTwo, publicationDBTypes, false, publicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publication struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = publicationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = publicationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Publications().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func publicationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Publication) error {
	*o = Publication{}
	return nil
}

func publicationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Publication) error {
	*o = Publication{}
	return nil
}

func publicationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Publication) error {
	*o = Publication{}
	return nil
}

func publicationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Publication) error {
	*o = Publication{}
	return nil
}

func publicationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Publication) error {
	*o = Publication{}
	return nil
}

func publicationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Publication) error {
	*o = Publication{}
	return nil
}

func publicationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Publication) error {
	*o = Publication{}
	return nil
}

func publicationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Publication) error {
	*o = Publication{}
	return nil
}

func publicationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Publication) error {
	*o = Publication{}
	return nil
}

func testPublicationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Publication{}
	o := &Publication{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, publicationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Publication object: %s", err)
	}

	AddPublicationHook(boil.BeforeInsertHook, publicationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	publicationBeforeInsertHooks = []PublicationHook{}

	AddPublicationHook(boil.AfterInsertHook, publicationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	publicationAfterInsertHooks = []PublicationHook{}

	AddPublicationHook(boil.AfterSelectHook, publicationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	publicationAfterSelectHooks = []PublicationHook{}

	AddPublicationHook(boil.BeforeUpdateHook, publicationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	publicationBeforeUpdateHooks = []PublicationHook{}

	AddPublicationHook(boil.AfterUpdateHook, publicationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	publicationAfterUpdateHooks = []PublicationHook{}

	AddPublicationHook(boil.BeforeDeleteHook, publicationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	publicationBeforeDeleteHooks = []PublicationHook{}

	AddPublicationHook(boil.AfterDeleteHook, publicationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	publicationAfterDeleteHooks = []PublicationHook{}

	AddPublicationHook(boil.BeforeUpsertHook, publicationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	publicationBeforeUpsertHooks = []PublicationHook{}

	AddPublicationHook(boil.AfterUpsertHook, publicationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	publicationAfterUpsertHooks = []PublicationHook{}
}

func testPublicationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Publication{}
	if err = randomize.Struct(seed, o, publicationDBTypes, true, publicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publication struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Publications().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPublicationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Publication{}
	if err = randomize.Struct(seed, o, publicationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Publication struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(publicationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Publications().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPublicationToOneUserUsingAuthIdUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Publication
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, publicationDBTypes, false, publicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publication struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AuthId = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.AuthIdUser().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := PublicationSlice{&local}
	if err = local.L.LoadAuthIdUser(ctx, tx, false, (*[]*Publication)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.AuthIdUser == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.AuthIdUser = nil
	if err = local.L.LoadAuthIdUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.AuthIdUser == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testPublicationToOneSetOpUserUsingAuthIdUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Publication
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, publicationDBTypes, false, strmangle.SetComplement(publicationPrimaryKeyColumns, publicationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetAuthIdUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.AuthIdUser != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AuthIdPublications[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AuthId != x.ID {
			t.Error("foreign key was wrong value", a.AuthId)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AuthId))
		reflect.Indirect(reflect.ValueOf(&a.AuthId)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AuthId != x.ID {
			t.Error("foreign key was wrong value", a.AuthId, x.ID)
		}
	}
}

func testPublicationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Publication{}
	if err = randomize.Struct(seed, o, publicationDBTypes, true, publicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publication struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPublicationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Publication{}
	if err = randomize.Struct(seed, o, publicationDBTypes, true, publicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publication struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PublicationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPublicationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Publication{}
	if err = randomize.Struct(seed, o, publicationDBTypes, true, publicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publication struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Publications().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	publicationDBTypes = map[string]string{`ID`: `varchar`, `Title`: `varchar`, `Description`: `varchar`, `Content`: `varchar`, `Like`: `int`, `AuthId`: `varchar`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`}
	_                  = bytes.MinRead
)

func testPublicationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(publicationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(publicationAllColumns) == len(publicationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Publication{}
	if err = randomize.Struct(seed, o, publicationDBTypes, true, publicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publication struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Publications().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, publicationDBTypes, true, publicationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Publication struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPublicationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(publicationAllColumns) == len(publicationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Publication{}
	if err = randomize.Struct(seed, o, publicationDBTypes, true, publicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publication struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Publications().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, publicationDBTypes, true, publicationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Publication struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(publicationAllColumns, publicationPrimaryKeyColumns) {
		fields = publicationAllColumns
	} else {
		fields = strmangle.SetComplement(
			publicationAllColumns,
			publicationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PublicationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPublicationsUpsert(t *testing.T) {
	t.Parallel()

	if len(publicationAllColumns) == len(publicationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLPublicationUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Publication{}
	if err = randomize.Struct(seed, &o, publicationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Publication struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Publication: %s", err)
	}

	count, err := Publications().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, publicationDBTypes, false, publicationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Publication struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Publication: %s", err)
	}

	count, err = Publications().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
