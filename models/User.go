// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// USER is an object representing the database table.
type USER struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Nick      string    `boil:"nick" json:"nick" toml:"nick" yaml:"nick"`
	Email     string    `boil:"email" json:"email" toml:"email" yaml:"email"`
	Password  string    `boil:"password" json:"password" toml:"password" yaml:"password"`
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *uSERR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L uSERL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var USERColumns = struct {
	ID        string
	Name      string
	Nick      string
	Email     string
	Password  string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Name:      "name",
	Nick:      "nick",
	Email:     "email",
	Password:  "password",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var USERTableColumns = struct {
	ID        string
	Name      string
	Nick      string
	Email     string
	Password  string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "USER.id",
	Name:      "USER.name",
	Nick:      "USER.nick",
	Email:     "USER.email",
	Password:  "USER.password",
	CreatedAt: "USER.created_at",
	UpdatedAt: "USER.updated_at",
}

// Generated where

var USERWhere = struct {
	ID        whereHelperint
	Name      whereHelperstring
	Nick      whereHelperstring
	Email     whereHelperstring
	Password  whereHelperstring
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
}{
	ID:        whereHelperint{field: "`USER`.`id`"},
	Name:      whereHelperstring{field: "`USER`.`name`"},
	Nick:      whereHelperstring{field: "`USER`.`nick`"},
	Email:     whereHelperstring{field: "`USER`.`email`"},
	Password:  whereHelperstring{field: "`USER`.`password`"},
	CreatedAt: whereHelpernull_Time{field: "`USER`.`created_at`"},
	UpdatedAt: whereHelpernull_Time{field: "`USER`.`updated_at`"},
}

// USERRels is where relationship names are stored.
var USERRels = struct {
	FollowerUSERS    string
	UserUSERS        string
	AuthPUBLICATIONS string
}{
	FollowerUSERS:    "FollowerUSERS",
	UserUSERS:        "UserUSERS",
	AuthPUBLICATIONS: "AuthPUBLICATIONS",
}

// uSERR is where relationships are stored.
type uSERR struct {
	FollowerUSERS    USERSlice        `boil:"FollowerUSERS" json:"FollowerUSERS" toml:"FollowerUSERS" yaml:"FollowerUSERS"`
	UserUSERS        USERSlice        `boil:"UserUSERS" json:"UserUSERS" toml:"UserUSERS" yaml:"UserUSERS"`
	AuthPUBLICATIONS PUBLICATIONSlice `boil:"AuthPUBLICATIONS" json:"AuthPUBLICATIONS" toml:"AuthPUBLICATIONS" yaml:"AuthPUBLICATIONS"`
}

// NewStruct creates a new relationship struct
func (*uSERR) NewStruct() *uSERR {
	return &uSERR{}
}

func (r *uSERR) GetFollowerUSERS() USERSlice {
	if r == nil {
		return nil
	}
	return r.FollowerUSERS
}

func (r *uSERR) GetUserUSERS() USERSlice {
	if r == nil {
		return nil
	}
	return r.UserUSERS
}

func (r *uSERR) GetAuthPUBLICATIONS() PUBLICATIONSlice {
	if r == nil {
		return nil
	}
	return r.AuthPUBLICATIONS
}

// uSERL is where Load methods for each relationship are stored.
type uSERL struct{}

var (
	uSERAllColumns            = []string{"id", "name", "nick", "email", "password", "created_at", "updated_at"}
	uSERColumnsWithoutDefault = []string{"name", "nick", "email", "password", "updated_at"}
	uSERColumnsWithDefault    = []string{"id", "created_at"}
	uSERPrimaryKeyColumns     = []string{"id"}
	uSERGeneratedColumns      = []string{}
)

type (
	// USERSlice is an alias for a slice of pointers to USER.
	// This should almost always be used instead of []USER.
	USERSlice []*USER
	// USERHook is the signature for custom USER hook methods
	USERHook func(context.Context, boil.ContextExecutor, *USER) error

	uSERQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	uSERType                 = reflect.TypeOf(&USER{})
	uSERMapping              = queries.MakeStructMapping(uSERType)
	uSERPrimaryKeyMapping, _ = queries.BindMapping(uSERType, uSERMapping, uSERPrimaryKeyColumns)
	uSERInsertCacheMut       sync.RWMutex
	uSERInsertCache          = make(map[string]insertCache)
	uSERUpdateCacheMut       sync.RWMutex
	uSERUpdateCache          = make(map[string]updateCache)
	uSERUpsertCacheMut       sync.RWMutex
	uSERUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var uSERAfterSelectHooks []USERHook

var uSERBeforeInsertHooks []USERHook
var uSERAfterInsertHooks []USERHook

var uSERBeforeUpdateHooks []USERHook
var uSERAfterUpdateHooks []USERHook

var uSERBeforeDeleteHooks []USERHook
var uSERAfterDeleteHooks []USERHook

var uSERBeforeUpsertHooks []USERHook
var uSERAfterUpsertHooks []USERHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *USER) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uSERAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *USER) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uSERBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *USER) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uSERAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *USER) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uSERBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *USER) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uSERAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *USER) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uSERBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *USER) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uSERAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *USER) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uSERBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *USER) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uSERAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUSERHook registers your hook function for all future operations.
func AddUSERHook(hookPoint boil.HookPoint, uSERHook USERHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		uSERAfterSelectHooks = append(uSERAfterSelectHooks, uSERHook)
	case boil.BeforeInsertHook:
		uSERBeforeInsertHooks = append(uSERBeforeInsertHooks, uSERHook)
	case boil.AfterInsertHook:
		uSERAfterInsertHooks = append(uSERAfterInsertHooks, uSERHook)
	case boil.BeforeUpdateHook:
		uSERBeforeUpdateHooks = append(uSERBeforeUpdateHooks, uSERHook)
	case boil.AfterUpdateHook:
		uSERAfterUpdateHooks = append(uSERAfterUpdateHooks, uSERHook)
	case boil.BeforeDeleteHook:
		uSERBeforeDeleteHooks = append(uSERBeforeDeleteHooks, uSERHook)
	case boil.AfterDeleteHook:
		uSERAfterDeleteHooks = append(uSERAfterDeleteHooks, uSERHook)
	case boil.BeforeUpsertHook:
		uSERBeforeUpsertHooks = append(uSERBeforeUpsertHooks, uSERHook)
	case boil.AfterUpsertHook:
		uSERAfterUpsertHooks = append(uSERAfterUpsertHooks, uSERHook)
	}
}

// One returns a single uSER record from the query.
func (q uSERQuery) One(ctx context.Context, exec boil.ContextExecutor) (*USER, error) {
	o := &USER{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for USER")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all USER records from the query.
func (q uSERQuery) All(ctx context.Context, exec boil.ContextExecutor) (USERSlice, error) {
	var o []*USER

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to USER slice")
	}

	if len(uSERAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all USER records in the query.
func (q uSERQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count USER rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q uSERQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if USER exists")
	}

	return count > 0, nil
}

// FollowerUSERS retrieves all the USER's USERS with an executor via id column.
func (o *USER) FollowerUSERS(mods ...qm.QueryMod) uSERQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("`FOLLOWERS` on `USER`.`id` = `FOLLOWERS`.`follower_id`"),
		qm.Where("`FOLLOWERS`.`user_id`=?", o.ID),
	)

	return USERS(queryMods...)
}

// UserUSERS retrieves all the USER's USERS with an executor via id column.
func (o *USER) UserUSERS(mods ...qm.QueryMod) uSERQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("`FOLLOWERS` on `USER`.`id` = `FOLLOWERS`.`user_id`"),
		qm.Where("`FOLLOWERS`.`follower_id`=?", o.ID),
	)

	return USERS(queryMods...)
}

// AuthPUBLICATIONS retrieves all the PUBLICATION's PUBLICATIONS with an executor via auth_id column.
func (o *USER) AuthPUBLICATIONS(mods ...qm.QueryMod) pUBLICATIONQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`PUBLICATION`.`auth_id`=?", o.ID),
	)

	return PUBLICATIONS(queryMods...)
}

// LoadFollowerUSERS allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (uSERL) LoadFollowerUSERS(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUSER interface{}, mods queries.Applicator) error {
	var slice []*USER
	var object *USER

	if singular {
		var ok bool
		object, ok = maybeUSER.(*USER)
		if !ok {
			object = new(USER)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUSER)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUSER))
			}
		}
	} else {
		s, ok := maybeUSER.(*[]*USER)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUSER)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUSER))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &uSERR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &uSERR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("`USER`.`id`, `USER`.`name`, `USER`.`nick`, `USER`.`email`, `USER`.`password`, `USER`.`created_at`, `USER`.`updated_at`, `a`.`user_id`"),
		qm.From("`USER`"),
		qm.InnerJoin("`FOLLOWERS` as `a` on `USER`.`id` = `a`.`follower_id`"),
		qm.WhereIn("`a`.`user_id` in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load USER")
	}

	var resultSlice []*USER

	var localJoinCols []int
	for results.Next() {
		one := new(USER)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Name, &one.Nick, &one.Email, &one.Password, &one.CreatedAt, &one.UpdatedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for USER")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice USER")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on USER")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for USER")
	}

	if len(uSERAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FollowerUSERS = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &uSERR{}
			}
			foreign.R.UserUSERS = append(foreign.R.UserUSERS, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.FollowerUSERS = append(local.R.FollowerUSERS, foreign)
				if foreign.R == nil {
					foreign.R = &uSERR{}
				}
				foreign.R.UserUSERS = append(foreign.R.UserUSERS, local)
				break
			}
		}
	}

	return nil
}

// LoadUserUSERS allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (uSERL) LoadUserUSERS(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUSER interface{}, mods queries.Applicator) error {
	var slice []*USER
	var object *USER

	if singular {
		var ok bool
		object, ok = maybeUSER.(*USER)
		if !ok {
			object = new(USER)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUSER)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUSER))
			}
		}
	} else {
		s, ok := maybeUSER.(*[]*USER)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUSER)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUSER))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &uSERR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &uSERR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("`USER`.`id`, `USER`.`name`, `USER`.`nick`, `USER`.`email`, `USER`.`password`, `USER`.`created_at`, `USER`.`updated_at`, `a`.`follower_id`"),
		qm.From("`USER`"),
		qm.InnerJoin("`FOLLOWERS` as `a` on `USER`.`id` = `a`.`user_id`"),
		qm.WhereIn("`a`.`follower_id` in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load USER")
	}

	var resultSlice []*USER

	var localJoinCols []int
	for results.Next() {
		one := new(USER)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Name, &one.Nick, &one.Email, &one.Password, &one.CreatedAt, &one.UpdatedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for USER")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice USER")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on USER")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for USER")
	}

	if len(uSERAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserUSERS = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &uSERR{}
			}
			foreign.R.FollowerUSERS = append(foreign.R.FollowerUSERS, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.UserUSERS = append(local.R.UserUSERS, foreign)
				if foreign.R == nil {
					foreign.R = &uSERR{}
				}
				foreign.R.FollowerUSERS = append(foreign.R.FollowerUSERS, local)
				break
			}
		}
	}

	return nil
}

// LoadAuthPUBLICATIONS allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (uSERL) LoadAuthPUBLICATIONS(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUSER interface{}, mods queries.Applicator) error {
	var slice []*USER
	var object *USER

	if singular {
		var ok bool
		object, ok = maybeUSER.(*USER)
		if !ok {
			object = new(USER)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUSER)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUSER))
			}
		}
	} else {
		s, ok := maybeUSER.(*[]*USER)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUSER)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUSER))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &uSERR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &uSERR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`PUBLICATION`),
		qm.WhereIn(`PUBLICATION.auth_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PUBLICATION")
	}

	var resultSlice []*PUBLICATION
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PUBLICATION")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on PUBLICATION")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for PUBLICATION")
	}

	if len(pUBLICATIONAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AuthPUBLICATIONS = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pUBLICATIONR{}
			}
			foreign.R.Auth = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AuthID {
				local.R.AuthPUBLICATIONS = append(local.R.AuthPUBLICATIONS, foreign)
				if foreign.R == nil {
					foreign.R = &pUBLICATIONR{}
				}
				foreign.R.Auth = local
				break
			}
		}
	}

	return nil
}

// AddFollowerUSERS adds the given related objects to the existing relationships
// of the USER, optionally inserting them as new records.
// Appends related to o.R.FollowerUSERS.
// Sets related.R.UserUSERS appropriately.
func (o *USER) AddFollowerUSERS(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*USER) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into `FOLLOWERS` (`user_id`, `follower_id`) values (?, ?)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &uSERR{
			FollowerUSERS: related,
		}
	} else {
		o.R.FollowerUSERS = append(o.R.FollowerUSERS, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &uSERR{
				UserUSERS: USERSlice{o},
			}
		} else {
			rel.R.UserUSERS = append(rel.R.UserUSERS, o)
		}
	}
	return nil
}

// SetFollowerUSERS removes all previously related items of the
// USER replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.UserUSERS's FollowerUSERS accordingly.
// Replaces o.R.FollowerUSERS with related.
// Sets related.R.UserUSERS's FollowerUSERS accordingly.
func (o *USER) SetFollowerUSERS(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*USER) error {
	query := "delete from `FOLLOWERS` where `user_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeFollowerUSERSFromUserUSERSSlice(o, related)
	if o.R != nil {
		o.R.FollowerUSERS = nil
	}

	return o.AddFollowerUSERS(ctx, exec, insert, related...)
}

// RemoveFollowerUSERS relationships from objects passed in.
// Removes related items from R.FollowerUSERS (uses pointer comparison, removal does not keep order)
// Sets related.R.UserUSERS.
func (o *USER) RemoveFollowerUSERS(ctx context.Context, exec boil.ContextExecutor, related ...*USER) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from `FOLLOWERS` where `user_id` = ? and `follower_id` in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeFollowerUSERSFromUserUSERSSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.FollowerUSERS {
			if rel != ri {
				continue
			}

			ln := len(o.R.FollowerUSERS)
			if ln > 1 && i < ln-1 {
				o.R.FollowerUSERS[i] = o.R.FollowerUSERS[ln-1]
			}
			o.R.FollowerUSERS = o.R.FollowerUSERS[:ln-1]
			break
		}
	}

	return nil
}

func removeFollowerUSERSFromUserUSERSSlice(o *USER, related []*USER) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.UserUSERS {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.UserUSERS)
			if ln > 1 && i < ln-1 {
				rel.R.UserUSERS[i] = rel.R.UserUSERS[ln-1]
			}
			rel.R.UserUSERS = rel.R.UserUSERS[:ln-1]
			break
		}
	}
}

// AddUserUSERS adds the given related objects to the existing relationships
// of the USER, optionally inserting them as new records.
// Appends related to o.R.UserUSERS.
// Sets related.R.FollowerUSERS appropriately.
func (o *USER) AddUserUSERS(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*USER) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into `FOLLOWERS` (`follower_id`, `user_id`) values (?, ?)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &uSERR{
			UserUSERS: related,
		}
	} else {
		o.R.UserUSERS = append(o.R.UserUSERS, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &uSERR{
				FollowerUSERS: USERSlice{o},
			}
		} else {
			rel.R.FollowerUSERS = append(rel.R.FollowerUSERS, o)
		}
	}
	return nil
}

// SetUserUSERS removes all previously related items of the
// USER replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.FollowerUSERS's UserUSERS accordingly.
// Replaces o.R.UserUSERS with related.
// Sets related.R.FollowerUSERS's UserUSERS accordingly.
func (o *USER) SetUserUSERS(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*USER) error {
	query := "delete from `FOLLOWERS` where `follower_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeUserUSERSFromFollowerUSERSSlice(o, related)
	if o.R != nil {
		o.R.UserUSERS = nil
	}

	return o.AddUserUSERS(ctx, exec, insert, related...)
}

// RemoveUserUSERS relationships from objects passed in.
// Removes related items from R.UserUSERS (uses pointer comparison, removal does not keep order)
// Sets related.R.FollowerUSERS.
func (o *USER) RemoveUserUSERS(ctx context.Context, exec boil.ContextExecutor, related ...*USER) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from `FOLLOWERS` where `follower_id` = ? and `user_id` in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeUserUSERSFromFollowerUSERSSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.UserUSERS {
			if rel != ri {
				continue
			}

			ln := len(o.R.UserUSERS)
			if ln > 1 && i < ln-1 {
				o.R.UserUSERS[i] = o.R.UserUSERS[ln-1]
			}
			o.R.UserUSERS = o.R.UserUSERS[:ln-1]
			break
		}
	}

	return nil
}

func removeUserUSERSFromFollowerUSERSSlice(o *USER, related []*USER) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.FollowerUSERS {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.FollowerUSERS)
			if ln > 1 && i < ln-1 {
				rel.R.FollowerUSERS[i] = rel.R.FollowerUSERS[ln-1]
			}
			rel.R.FollowerUSERS = rel.R.FollowerUSERS[:ln-1]
			break
		}
	}
}

// AddAuthPUBLICATIONS adds the given related objects to the existing relationships
// of the USER, optionally inserting them as new records.
// Appends related to o.R.AuthPUBLICATIONS.
// Sets related.R.Auth appropriately.
func (o *USER) AddAuthPUBLICATIONS(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PUBLICATION) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AuthID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `PUBLICATION` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"auth_id"}),
				strmangle.WhereClause("`", "`", 0, pUBLICATIONPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AuthID = o.ID
		}
	}

	if o.R == nil {
		o.R = &uSERR{
			AuthPUBLICATIONS: related,
		}
	} else {
		o.R.AuthPUBLICATIONS = append(o.R.AuthPUBLICATIONS, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pUBLICATIONR{
				Auth: o,
			}
		} else {
			rel.R.Auth = o
		}
	}
	return nil
}

// USERS retrieves all the records using an executor.
func USERS(mods ...qm.QueryMod) uSERQuery {
	mods = append(mods, qm.From("`USER`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`USER`.*"})
	}

	return uSERQuery{q}
}

// FindUSER retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUSER(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*USER, error) {
	uSERObj := &USER{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `USER` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, uSERObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from USER")
	}

	if err = uSERObj.doAfterSelectHooks(ctx, exec); err != nil {
		return uSERObj, err
	}

	return uSERObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *USER) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no USER provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(uSERColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	uSERInsertCacheMut.RLock()
	cache, cached := uSERInsertCache[key]
	uSERInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			uSERAllColumns,
			uSERColumnsWithDefault,
			uSERColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(uSERType, uSERMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(uSERType, uSERMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `USER` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `USER` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `USER` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, uSERPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into USER")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == uSERMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for USER")
	}

CacheNoHooks:
	if !cached {
		uSERInsertCacheMut.Lock()
		uSERInsertCache[key] = cache
		uSERInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the USER.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *USER) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	uSERUpdateCacheMut.RLock()
	cache, cached := uSERUpdateCache[key]
	uSERUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			uSERAllColumns,
			uSERPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update USER, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `USER` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, uSERPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(uSERType, uSERMapping, append(wl, uSERPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update USER row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for USER")
	}

	if !cached {
		uSERUpdateCacheMut.Lock()
		uSERUpdateCache[key] = cache
		uSERUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q uSERQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for USER")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for USER")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o USERSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uSERPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `USER` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, uSERPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in uSER slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all uSER")
	}
	return rowsAff, nil
}

var mySQLUSERUniqueColumns = []string{
	"id",
	"nick",
	"email",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *USER) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no USER provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(uSERColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUSERUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	uSERUpsertCacheMut.RLock()
	cache, cached := uSERUpsertCache[key]
	uSERUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			uSERAllColumns,
			uSERColumnsWithDefault,
			uSERColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			uSERAllColumns,
			uSERPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert USER, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`USER`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `USER` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(uSERType, uSERMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(uSERType, uSERMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for USER")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == uSERMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(uSERType, uSERMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for USER")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for USER")
	}

CacheNoHooks:
	if !cached {
		uSERUpsertCacheMut.Lock()
		uSERUpsertCache[key] = cache
		uSERUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single USER record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *USER) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no USER provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uSERPrimaryKeyMapping)
	sql := "DELETE FROM `USER` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from USER")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for USER")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q uSERQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no uSERQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from USER")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for USER")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o USERSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(uSERBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uSERPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `USER` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, uSERPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from uSER slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for USER")
	}

	if len(uSERAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *USER) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUSER(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *USERSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := USERSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uSERPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `USER`.* FROM `USER` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, uSERPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in USERSlice")
	}

	*o = slice

	return nil
}

// USERExists checks if the USER row exists.
func USERExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `USER` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if USER exists")
	}

	return exists, nil
}

// Exists checks if the USER row exists.
func (o *USER) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return USERExists(ctx, exec, o.ID)
}
