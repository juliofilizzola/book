// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPrismaMigrations(t *testing.T) {
	t.Parallel()

	query := PrismaMigrations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPrismaMigrationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PrismaMigration{}
	if err = randomize.Struct(seed, o, prismaMigrationDBTypes, true, prismaMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrismaMigration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PrismaMigrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPrismaMigrationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PrismaMigration{}
	if err = randomize.Struct(seed, o, prismaMigrationDBTypes, true, prismaMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrismaMigration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PrismaMigrations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PrismaMigrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPrismaMigrationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PrismaMigration{}
	if err = randomize.Struct(seed, o, prismaMigrationDBTypes, true, prismaMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrismaMigration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PrismaMigrationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PrismaMigrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPrismaMigrationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PrismaMigration{}
	if err = randomize.Struct(seed, o, prismaMigrationDBTypes, true, prismaMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrismaMigration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PrismaMigrationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if PrismaMigration exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PrismaMigrationExists to return true, but got false.")
	}
}

func testPrismaMigrationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PrismaMigration{}
	if err = randomize.Struct(seed, o, prismaMigrationDBTypes, true, prismaMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrismaMigration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	prismaMigrationFound, err := FindPrismaMigration(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if prismaMigrationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPrismaMigrationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PrismaMigration{}
	if err = randomize.Struct(seed, o, prismaMigrationDBTypes, true, prismaMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrismaMigration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PrismaMigrations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPrismaMigrationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PrismaMigration{}
	if err = randomize.Struct(seed, o, prismaMigrationDBTypes, true, prismaMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrismaMigration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PrismaMigrations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPrismaMigrationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	prismaMigrationOne := &PrismaMigration{}
	prismaMigrationTwo := &PrismaMigration{}
	if err = randomize.Struct(seed, prismaMigrationOne, prismaMigrationDBTypes, false, prismaMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrismaMigration struct: %s", err)
	}
	if err = randomize.Struct(seed, prismaMigrationTwo, prismaMigrationDBTypes, false, prismaMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrismaMigration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = prismaMigrationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = prismaMigrationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PrismaMigrations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPrismaMigrationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	prismaMigrationOne := &PrismaMigration{}
	prismaMigrationTwo := &PrismaMigration{}
	if err = randomize.Struct(seed, prismaMigrationOne, prismaMigrationDBTypes, false, prismaMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrismaMigration struct: %s", err)
	}
	if err = randomize.Struct(seed, prismaMigrationTwo, prismaMigrationDBTypes, false, prismaMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrismaMigration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = prismaMigrationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = prismaMigrationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PrismaMigrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func prismaMigrationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PrismaMigration) error {
	*o = PrismaMigration{}
	return nil
}

func prismaMigrationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PrismaMigration) error {
	*o = PrismaMigration{}
	return nil
}

func prismaMigrationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PrismaMigration) error {
	*o = PrismaMigration{}
	return nil
}

func prismaMigrationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PrismaMigration) error {
	*o = PrismaMigration{}
	return nil
}

func prismaMigrationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PrismaMigration) error {
	*o = PrismaMigration{}
	return nil
}

func prismaMigrationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PrismaMigration) error {
	*o = PrismaMigration{}
	return nil
}

func prismaMigrationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PrismaMigration) error {
	*o = PrismaMigration{}
	return nil
}

func prismaMigrationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PrismaMigration) error {
	*o = PrismaMigration{}
	return nil
}

func prismaMigrationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PrismaMigration) error {
	*o = PrismaMigration{}
	return nil
}

func testPrismaMigrationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PrismaMigration{}
	o := &PrismaMigration{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, prismaMigrationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PrismaMigration object: %s", err)
	}

	AddPrismaMigrationHook(boil.BeforeInsertHook, prismaMigrationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	prismaMigrationBeforeInsertHooks = []PrismaMigrationHook{}

	AddPrismaMigrationHook(boil.AfterInsertHook, prismaMigrationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	prismaMigrationAfterInsertHooks = []PrismaMigrationHook{}

	AddPrismaMigrationHook(boil.AfterSelectHook, prismaMigrationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	prismaMigrationAfterSelectHooks = []PrismaMigrationHook{}

	AddPrismaMigrationHook(boil.BeforeUpdateHook, prismaMigrationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	prismaMigrationBeforeUpdateHooks = []PrismaMigrationHook{}

	AddPrismaMigrationHook(boil.AfterUpdateHook, prismaMigrationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	prismaMigrationAfterUpdateHooks = []PrismaMigrationHook{}

	AddPrismaMigrationHook(boil.BeforeDeleteHook, prismaMigrationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	prismaMigrationBeforeDeleteHooks = []PrismaMigrationHook{}

	AddPrismaMigrationHook(boil.AfterDeleteHook, prismaMigrationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	prismaMigrationAfterDeleteHooks = []PrismaMigrationHook{}

	AddPrismaMigrationHook(boil.BeforeUpsertHook, prismaMigrationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	prismaMigrationBeforeUpsertHooks = []PrismaMigrationHook{}

	AddPrismaMigrationHook(boil.AfterUpsertHook, prismaMigrationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	prismaMigrationAfterUpsertHooks = []PrismaMigrationHook{}
}

func testPrismaMigrationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PrismaMigration{}
	if err = randomize.Struct(seed, o, prismaMigrationDBTypes, true, prismaMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrismaMigration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PrismaMigrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPrismaMigrationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PrismaMigration{}
	if err = randomize.Struct(seed, o, prismaMigrationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PrismaMigration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(prismaMigrationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PrismaMigrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPrismaMigrationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PrismaMigration{}
	if err = randomize.Struct(seed, o, prismaMigrationDBTypes, true, prismaMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrismaMigration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPrismaMigrationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PrismaMigration{}
	if err = randomize.Struct(seed, o, prismaMigrationDBTypes, true, prismaMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrismaMigration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PrismaMigrationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPrismaMigrationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PrismaMigration{}
	if err = randomize.Struct(seed, o, prismaMigrationDBTypes, true, prismaMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrismaMigration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PrismaMigrations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	prismaMigrationDBTypes = map[string]string{`ID`: `varchar`, `Checksum`: `varchar`, `FinishedAt`: `datetime`, `MigrationName`: `varchar`, `Logs`: `text`, `RolledBackAt`: `datetime`, `StartedAt`: `datetime`, `AppliedStepsCount`: `int`}
	_                      = bytes.MinRead
)

func testPrismaMigrationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(prismaMigrationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(prismaMigrationAllColumns) == len(prismaMigrationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PrismaMigration{}
	if err = randomize.Struct(seed, o, prismaMigrationDBTypes, true, prismaMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrismaMigration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PrismaMigrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, prismaMigrationDBTypes, true, prismaMigrationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PrismaMigration struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPrismaMigrationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(prismaMigrationAllColumns) == len(prismaMigrationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PrismaMigration{}
	if err = randomize.Struct(seed, o, prismaMigrationDBTypes, true, prismaMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrismaMigration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PrismaMigrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, prismaMigrationDBTypes, true, prismaMigrationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PrismaMigration struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(prismaMigrationAllColumns, prismaMigrationPrimaryKeyColumns) {
		fields = prismaMigrationAllColumns
	} else {
		fields = strmangle.SetComplement(
			prismaMigrationAllColumns,
			prismaMigrationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PrismaMigrationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPrismaMigrationsUpsert(t *testing.T) {
	t.Parallel()

	if len(prismaMigrationAllColumns) == len(prismaMigrationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLPrismaMigrationUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PrismaMigration{}
	if err = randomize.Struct(seed, &o, prismaMigrationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PrismaMigration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PrismaMigration: %s", err)
	}

	count, err := PrismaMigrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, prismaMigrationDBTypes, false, prismaMigrationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PrismaMigration struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PrismaMigration: %s", err)
	}

	count, err = PrismaMigrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
