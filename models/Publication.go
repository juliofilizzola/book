// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PUBLICATION is an object representing the database table.
type PUBLICATION struct {
	ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title       string      `boil:"title" json:"title" toml:"title" yaml:"title"`
	AuthID      int         `boil:"auth_id" json:"auth_id" toml:"auth_id" yaml:"auth_id"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Content     null.String `boil:"content" json:"content,omitempty" toml:"content" yaml:"content,omitempty"`
	Like        null.Int    `boil:"like" json:"like,omitempty" toml:"like" yaml:"like,omitempty"`
	CreatedAt   null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt   null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *pUBLICATIONR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pUBLICATIONL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PUBLICATIONColumns = struct {
	ID          string
	Title       string
	AuthID      string
	Description string
	Content     string
	Like        string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "id",
	Title:       "title",
	AuthID:      "auth_id",
	Description: "description",
	Content:     "content",
	Like:        "like",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var PUBLICATIONTableColumns = struct {
	ID          string
	Title       string
	AuthID      string
	Description string
	Content     string
	Like        string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "PUBLICATION.id",
	Title:       "PUBLICATION.title",
	AuthID:      "PUBLICATION.auth_id",
	Description: "PUBLICATION.description",
	Content:     "PUBLICATION.content",
	Like:        "PUBLICATION.like",
	CreatedAt:   "PUBLICATION.created_at",
	UpdatedAt:   "PUBLICATION.updated_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var PUBLICATIONWhere = struct {
	ID          whereHelperint
	Title       whereHelperstring
	AuthID      whereHelperint
	Description whereHelpernull_String
	Content     whereHelpernull_String
	Like        whereHelpernull_Int
	CreatedAt   whereHelpernull_Time
	UpdatedAt   whereHelpernull_Time
}{
	ID:          whereHelperint{field: "`PUBLICATION`.`id`"},
	Title:       whereHelperstring{field: "`PUBLICATION`.`title`"},
	AuthID:      whereHelperint{field: "`PUBLICATION`.`auth_id`"},
	Description: whereHelpernull_String{field: "`PUBLICATION`.`description`"},
	Content:     whereHelpernull_String{field: "`PUBLICATION`.`content`"},
	Like:        whereHelpernull_Int{field: "`PUBLICATION`.`like`"},
	CreatedAt:   whereHelpernull_Time{field: "`PUBLICATION`.`created_at`"},
	UpdatedAt:   whereHelpernull_Time{field: "`PUBLICATION`.`updated_at`"},
}

// PUBLICATIONRels is where relationship names are stored.
var PUBLICATIONRels = struct {
	Auth string
}{
	Auth: "Auth",
}

// pUBLICATIONR is where relationships are stored.
type pUBLICATIONR struct {
	Auth *USER `boil:"Auth" json:"Auth" toml:"Auth" yaml:"Auth"`
}

// NewStruct creates a new relationship struct
func (*pUBLICATIONR) NewStruct() *pUBLICATIONR {
	return &pUBLICATIONR{}
}

func (r *pUBLICATIONR) GetAuth() *USER {
	if r == nil {
		return nil
	}
	return r.Auth
}

// pUBLICATIONL is where Load methods for each relationship are stored.
type pUBLICATIONL struct{}

var (
	pUBLICATIONAllColumns            = []string{"id", "title", "auth_id", "description", "content", "like", "created_at", "updated_at"}
	pUBLICATIONColumnsWithoutDefault = []string{"title", "auth_id", "description", "content", "updated_at"}
	pUBLICATIONColumnsWithDefault    = []string{"id", "like", "created_at"}
	pUBLICATIONPrimaryKeyColumns     = []string{"id"}
	pUBLICATIONGeneratedColumns      = []string{}
)

type (
	// PUBLICATIONSlice is an alias for a slice of pointers to PUBLICATION.
	// This should almost always be used instead of []PUBLICATION.
	PUBLICATIONSlice []*PUBLICATION
	// PUBLICATIONHook is the signature for custom PUBLICATION hook methods
	PUBLICATIONHook func(context.Context, boil.ContextExecutor, *PUBLICATION) error

	pUBLICATIONQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pUBLICATIONType                 = reflect.TypeOf(&PUBLICATION{})
	pUBLICATIONMapping              = queries.MakeStructMapping(pUBLICATIONType)
	pUBLICATIONPrimaryKeyMapping, _ = queries.BindMapping(pUBLICATIONType, pUBLICATIONMapping, pUBLICATIONPrimaryKeyColumns)
	pUBLICATIONInsertCacheMut       sync.RWMutex
	pUBLICATIONInsertCache          = make(map[string]insertCache)
	pUBLICATIONUpdateCacheMut       sync.RWMutex
	pUBLICATIONUpdateCache          = make(map[string]updateCache)
	pUBLICATIONUpsertCacheMut       sync.RWMutex
	pUBLICATIONUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var pUBLICATIONAfterSelectHooks []PUBLICATIONHook

var pUBLICATIONBeforeInsertHooks []PUBLICATIONHook
var pUBLICATIONAfterInsertHooks []PUBLICATIONHook

var pUBLICATIONBeforeUpdateHooks []PUBLICATIONHook
var pUBLICATIONAfterUpdateHooks []PUBLICATIONHook

var pUBLICATIONBeforeDeleteHooks []PUBLICATIONHook
var pUBLICATIONAfterDeleteHooks []PUBLICATIONHook

var pUBLICATIONBeforeUpsertHooks []PUBLICATIONHook
var pUBLICATIONAfterUpsertHooks []PUBLICATIONHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PUBLICATION) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pUBLICATIONAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PUBLICATION) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pUBLICATIONBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PUBLICATION) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pUBLICATIONAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PUBLICATION) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pUBLICATIONBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PUBLICATION) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pUBLICATIONAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PUBLICATION) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pUBLICATIONBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PUBLICATION) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pUBLICATIONAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PUBLICATION) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pUBLICATIONBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PUBLICATION) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pUBLICATIONAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPUBLICATIONHook registers your hook function for all future operations.
func AddPUBLICATIONHook(hookPoint boil.HookPoint, pUBLICATIONHook PUBLICATIONHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		pUBLICATIONAfterSelectHooks = append(pUBLICATIONAfterSelectHooks, pUBLICATIONHook)
	case boil.BeforeInsertHook:
		pUBLICATIONBeforeInsertHooks = append(pUBLICATIONBeforeInsertHooks, pUBLICATIONHook)
	case boil.AfterInsertHook:
		pUBLICATIONAfterInsertHooks = append(pUBLICATIONAfterInsertHooks, pUBLICATIONHook)
	case boil.BeforeUpdateHook:
		pUBLICATIONBeforeUpdateHooks = append(pUBLICATIONBeforeUpdateHooks, pUBLICATIONHook)
	case boil.AfterUpdateHook:
		pUBLICATIONAfterUpdateHooks = append(pUBLICATIONAfterUpdateHooks, pUBLICATIONHook)
	case boil.BeforeDeleteHook:
		pUBLICATIONBeforeDeleteHooks = append(pUBLICATIONBeforeDeleteHooks, pUBLICATIONHook)
	case boil.AfterDeleteHook:
		pUBLICATIONAfterDeleteHooks = append(pUBLICATIONAfterDeleteHooks, pUBLICATIONHook)
	case boil.BeforeUpsertHook:
		pUBLICATIONBeforeUpsertHooks = append(pUBLICATIONBeforeUpsertHooks, pUBLICATIONHook)
	case boil.AfterUpsertHook:
		pUBLICATIONAfterUpsertHooks = append(pUBLICATIONAfterUpsertHooks, pUBLICATIONHook)
	}
}

// One returns a single pUBLICATION record from the query.
func (q pUBLICATIONQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PUBLICATION, error) {
	o := &PUBLICATION{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for PUBLICATION")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PUBLICATION records from the query.
func (q pUBLICATIONQuery) All(ctx context.Context, exec boil.ContextExecutor) (PUBLICATIONSlice, error) {
	var o []*PUBLICATION

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PUBLICATION slice")
	}

	if len(pUBLICATIONAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PUBLICATION records in the query.
func (q pUBLICATIONQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count PUBLICATION rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pUBLICATIONQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if PUBLICATION exists")
	}

	return count > 0, nil
}

// Auth pointed to by the foreign key.
func (o *PUBLICATION) Auth(mods ...qm.QueryMod) uSERQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.AuthID),
	}

	queryMods = append(queryMods, mods...)

	return USERS(queryMods...)
}

// LoadAuth allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pUBLICATIONL) LoadAuth(ctx context.Context, e boil.ContextExecutor, singular bool, maybePUBLICATION interface{}, mods queries.Applicator) error {
	var slice []*PUBLICATION
	var object *PUBLICATION

	if singular {
		var ok bool
		object, ok = maybePUBLICATION.(*PUBLICATION)
		if !ok {
			object = new(PUBLICATION)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePUBLICATION)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePUBLICATION))
			}
		}
	} else {
		s, ok := maybePUBLICATION.(*[]*PUBLICATION)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePUBLICATION)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePUBLICATION))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pUBLICATIONR{}
		}
		args = append(args, object.AuthID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pUBLICATIONR{}
			}

			for _, a := range args {
				if a == obj.AuthID {
					continue Outer
				}
			}

			args = append(args, obj.AuthID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`USER`),
		qm.WhereIn(`USER.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load USER")
	}

	var resultSlice []*USER
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice USER")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for USER")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for USER")
	}

	if len(uSERAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Auth = foreign
		if foreign.R == nil {
			foreign.R = &uSERR{}
		}
		foreign.R.AuthPUBLICATIONS = append(foreign.R.AuthPUBLICATIONS, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AuthID == foreign.ID {
				local.R.Auth = foreign
				if foreign.R == nil {
					foreign.R = &uSERR{}
				}
				foreign.R.AuthPUBLICATIONS = append(foreign.R.AuthPUBLICATIONS, local)
				break
			}
		}
	}

	return nil
}

// SetAuth of the pUBLICATION to the related item.
// Sets o.R.Auth to related.
// Adds o to related.R.AuthPUBLICATIONS.
func (o *PUBLICATION) SetAuth(ctx context.Context, exec boil.ContextExecutor, insert bool, related *USER) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `PUBLICATION` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"auth_id"}),
		strmangle.WhereClause("`", "`", 0, pUBLICATIONPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AuthID = related.ID
	if o.R == nil {
		o.R = &pUBLICATIONR{
			Auth: related,
		}
	} else {
		o.R.Auth = related
	}

	if related.R == nil {
		related.R = &uSERR{
			AuthPUBLICATIONS: PUBLICATIONSlice{o},
		}
	} else {
		related.R.AuthPUBLICATIONS = append(related.R.AuthPUBLICATIONS, o)
	}

	return nil
}

// PUBLICATIONS retrieves all the records using an executor.
func PUBLICATIONS(mods ...qm.QueryMod) pUBLICATIONQuery {
	mods = append(mods, qm.From("`PUBLICATION`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`PUBLICATION`.*"})
	}

	return pUBLICATIONQuery{q}
}

// FindPUBLICATION retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPUBLICATION(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PUBLICATION, error) {
	pUBLICATIONObj := &PUBLICATION{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `PUBLICATION` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, pUBLICATIONObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from PUBLICATION")
	}

	if err = pUBLICATIONObj.doAfterSelectHooks(ctx, exec); err != nil {
		return pUBLICATIONObj, err
	}

	return pUBLICATIONObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PUBLICATION) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no PUBLICATION provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pUBLICATIONColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pUBLICATIONInsertCacheMut.RLock()
	cache, cached := pUBLICATIONInsertCache[key]
	pUBLICATIONInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pUBLICATIONAllColumns,
			pUBLICATIONColumnsWithDefault,
			pUBLICATIONColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pUBLICATIONType, pUBLICATIONMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pUBLICATIONType, pUBLICATIONMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `PUBLICATION` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `PUBLICATION` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `PUBLICATION` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, pUBLICATIONPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into PUBLICATION")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == pUBLICATIONMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for PUBLICATION")
	}

CacheNoHooks:
	if !cached {
		pUBLICATIONInsertCacheMut.Lock()
		pUBLICATIONInsertCache[key] = cache
		pUBLICATIONInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PUBLICATION.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PUBLICATION) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	pUBLICATIONUpdateCacheMut.RLock()
	cache, cached := pUBLICATIONUpdateCache[key]
	pUBLICATIONUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pUBLICATIONAllColumns,
			pUBLICATIONPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update PUBLICATION, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `PUBLICATION` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, pUBLICATIONPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pUBLICATIONType, pUBLICATIONMapping, append(wl, pUBLICATIONPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update PUBLICATION row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for PUBLICATION")
	}

	if !cached {
		pUBLICATIONUpdateCacheMut.Lock()
		pUBLICATIONUpdateCache[key] = cache
		pUBLICATIONUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q pUBLICATIONQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for PUBLICATION")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for PUBLICATION")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PUBLICATIONSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pUBLICATIONPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `PUBLICATION` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, pUBLICATIONPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in pUBLICATION slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all pUBLICATION")
	}
	return rowsAff, nil
}

var mySQLPUBLICATIONUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PUBLICATION) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no PUBLICATION provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pUBLICATIONColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPUBLICATIONUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pUBLICATIONUpsertCacheMut.RLock()
	cache, cached := pUBLICATIONUpsertCache[key]
	pUBLICATIONUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			pUBLICATIONAllColumns,
			pUBLICATIONColumnsWithDefault,
			pUBLICATIONColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			pUBLICATIONAllColumns,
			pUBLICATIONPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert PUBLICATION, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`PUBLICATION`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `PUBLICATION` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(pUBLICATIONType, pUBLICATIONMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pUBLICATIONType, pUBLICATIONMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for PUBLICATION")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == pUBLICATIONMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(pUBLICATIONType, pUBLICATIONMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for PUBLICATION")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for PUBLICATION")
	}

CacheNoHooks:
	if !cached {
		pUBLICATIONUpsertCacheMut.Lock()
		pUBLICATIONUpsertCache[key] = cache
		pUBLICATIONUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PUBLICATION record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PUBLICATION) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PUBLICATION provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pUBLICATIONPrimaryKeyMapping)
	sql := "DELETE FROM `PUBLICATION` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from PUBLICATION")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for PUBLICATION")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pUBLICATIONQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no pUBLICATIONQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from PUBLICATION")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for PUBLICATION")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PUBLICATIONSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(pUBLICATIONBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pUBLICATIONPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `PUBLICATION` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, pUBLICATIONPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pUBLICATION slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for PUBLICATION")
	}

	if len(pUBLICATIONAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PUBLICATION) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPUBLICATION(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PUBLICATIONSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PUBLICATIONSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pUBLICATIONPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `PUBLICATION`.* FROM `PUBLICATION` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, pUBLICATIONPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PUBLICATIONSlice")
	}

	*o = slice

	return nil
}

// PUBLICATIONExists checks if the PUBLICATION row exists.
func PUBLICATIONExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `PUBLICATION` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if PUBLICATION exists")
	}

	return exists, nil
}

// Exists checks if the PUBLICATION row exists.
func (o *PUBLICATION) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PUBLICATIONExists(ctx, exec, o.ID)
}
