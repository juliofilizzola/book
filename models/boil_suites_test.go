// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Publications", testPublications)
	t.Run("Users", testUsers)
	t.Run("PrismaMigrations", testPrismaMigrations)
}

func TestDelete(t *testing.T) {
	t.Run("Publications", testPublicationsDelete)
	t.Run("Users", testUsersDelete)
	t.Run("PrismaMigrations", testPrismaMigrationsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Publications", testPublicationsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
	t.Run("PrismaMigrations", testPrismaMigrationsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Publications", testPublicationsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
	t.Run("PrismaMigrations", testPrismaMigrationsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Publications", testPublicationsExists)
	t.Run("Users", testUsersExists)
	t.Run("PrismaMigrations", testPrismaMigrationsExists)
}

func TestFind(t *testing.T) {
	t.Run("Publications", testPublicationsFind)
	t.Run("Users", testUsersFind)
	t.Run("PrismaMigrations", testPrismaMigrationsFind)
}

func TestBind(t *testing.T) {
	t.Run("Publications", testPublicationsBind)
	t.Run("Users", testUsersBind)
	t.Run("PrismaMigrations", testPrismaMigrationsBind)
}

func TestOne(t *testing.T) {
	t.Run("Publications", testPublicationsOne)
	t.Run("Users", testUsersOne)
	t.Run("PrismaMigrations", testPrismaMigrationsOne)
}

func TestAll(t *testing.T) {
	t.Run("Publications", testPublicationsAll)
	t.Run("Users", testUsersAll)
	t.Run("PrismaMigrations", testPrismaMigrationsAll)
}

func TestCount(t *testing.T) {
	t.Run("Publications", testPublicationsCount)
	t.Run("Users", testUsersCount)
	t.Run("PrismaMigrations", testPrismaMigrationsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Publications", testPublicationsHooks)
	t.Run("Users", testUsersHooks)
	t.Run("PrismaMigrations", testPrismaMigrationsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Publications", testPublicationsInsert)
	t.Run("Publications", testPublicationsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
	t.Run("PrismaMigrations", testPrismaMigrationsInsert)
	t.Run("PrismaMigrations", testPrismaMigrationsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("PublicationToUserUsingAuthIdUser", testPublicationToOneUserUsingAuthIdUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("UserToFollowingIdUsers", testUserToManyFollowingIdUsers)
	t.Run("UserToFollowerIdUsers", testUserToManyFollowerIdUsers)
	t.Run("UserToAuthIdPublications", testUserToManyAuthIdPublications)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("PublicationToUserUsingAuthIdPublications", testPublicationToOneSetOpUserUsingAuthIdUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("UserToFollowingIdUsers", testUserToManyAddOpFollowingIdUsers)
	t.Run("UserToFollowerIdUsers", testUserToManyAddOpFollowerIdUsers)
	t.Run("UserToAuthIdPublications", testUserToManyAddOpAuthIdPublications)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("UserToFollowingIdUsers", testUserToManySetOpFollowingIdUsers)
	t.Run("UserToFollowerIdUsers", testUserToManySetOpFollowerIdUsers)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("UserToFollowingIdUsers", testUserToManyRemoveOpFollowingIdUsers)
	t.Run("UserToFollowerIdUsers", testUserToManyRemoveOpFollowerIdUsers)
}

func TestReload(t *testing.T) {
	t.Run("Publications", testPublicationsReload)
	t.Run("Users", testUsersReload)
	t.Run("PrismaMigrations", testPrismaMigrationsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Publications", testPublicationsReloadAll)
	t.Run("Users", testUsersReloadAll)
	t.Run("PrismaMigrations", testPrismaMigrationsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Publications", testPublicationsSelect)
	t.Run("Users", testUsersSelect)
	t.Run("PrismaMigrations", testPrismaMigrationsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Publications", testPublicationsUpdate)
	t.Run("Users", testUsersUpdate)
	t.Run("PrismaMigrations", testPrismaMigrationsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Publications", testPublicationsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
	t.Run("PrismaMigrations", testPrismaMigrationsSliceUpdateAll)
}
